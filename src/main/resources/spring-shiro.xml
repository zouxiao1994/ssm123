<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
http://www.springframework.org/schema/context   
http://www.springframework.org/schema/context/spring-context-3.1.xsd  
http://www.springframework.org/schema/aop   
http://www.springframework.org/schema/aop/spring-aop-3.1.xsd  
http://www.springframework.org/schema/tx   
http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">
	
	
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 缓存管理器 -->
		<!-- <property name="cacheManager" ref="cacheManager" /> -->
		<!-- sesion 的管理方式 -->
		<!-- <property name="sessionMode" value="native" /> -->
		<!-- <property name="realm" ref="jdbcRealm" /> -->
		<property name="authenticator" ref="authenticator"></property>
		<property name="realms">
			<list>
				<ref bean="jdbcRealm"/>
				<!-- <ref bean="secondRealm"/> -->
			</list>
		</property>
	</bean>

	<!-- Let's use some enterprise caching support for better performance. You 
		can replace this with any enterprise caching framework implementation that 
		you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
	<!-- <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"> -->
		<!-- Set a net.sf.ehcache.CacheManager instance here if you already have 
			one. If not, a new one will be creaed with a default config: <property name="cacheManager" 
			ref="ehCacheManager"/> -->
		<!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance 
			to inject, but you want a specific Ehcache configuration to be used, specify 
			that here. If you don't, a default will be used.: <property name="cacheManagerConfigFile" 
			value="classpath:some/path/to/ehcache.xml"/> -->
			
		<!-- 配置 cacheManager-->
		<!-- 需要加入ehcache 的jar包 -->	
		<!-- <property name="cacheManagerConfigFile" 
			value="classpath:ehcache.xml"/>
	</bean> -->

	<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		<property name="authenticationStrategy">
			<bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
		</property>
	</bean>
	
	<!-- 配置realm  直接配置实现了real接口的 bean com.zx.realm.ShiroRealm -->	
	<bean id="jdbcRealm" class="com.zx.realm.ShiroRealm">
		<!--<property name="credentialsMatcher">
			 <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="MD5"></property>
				<property name="hashIterations" value="1024"></property>
			</bean> 
		</property>-->
	</bean>
	
	<bean id="secondRealm" class="com.zx.realm.SecondRealm">
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="SHA1"></property>
				<property name="hashIterations" value="1024"></property>
			</bean>
		</property>
	</bean>

	<!-- ========================================================= Shiro Spring-specific 
		integration ========================================================= -->
	<!-- Post processor that automatically invokes init() and destroy() methods 
		for Spring-configured Shiro objects so you don't have to 1) specify an init-method 
		and destroy-method attributes for every bean definition and 2) even know 
		which Shiro objects require these methods to be called. -->
	
	<!-- 可以自动的调用配置在spring IOC容器 shiro 的生命周期方法-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	
	<!-- 在IOC容器中使用 shiro的注解，但必须在配置了 lifecycleBeanPostProcessor 之后 -->
	<!-- <bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
 -->

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login.jsp" />
		<property name="successUrl" value="/list.jsp" />
		<property name="unauthorizedUrl" value="/unauthorized.jsp" />
		
		<property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>
		<!-- 配置那些页面需要受保护 -->
		<!-- 以及访问这些页面需要的权限 
			 anon 可以被匿名访问
			 authc 必须认证之后才可以访问（登录
			 logout 登出
		-->
		<!-- <property name="filterChainDefinitions">
			<value>
				/login.jsp = anon
				/shiro/login = anon
				/shiro/logout = logout
				/admin.jsp = roles[admin]
				/user.jsp = roles[user]

				# everything else requires authentication:
				/** = authc
			</value>
		</property> -->
	</bean>
	
	 <!-- 配置一个bean 该bean实际上是一个map 通过实例工厂方法的方式 -->
	<bean id="filterChainDefinitionMapBuilder" class="com.zx.factory.FilterChainDefinitionMapBuilder"></bean>
       
	<!-- 实例 -->
	<bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuilder" factory-method="buildFilterChainDefinitionMap"></bean>
	
</beans>